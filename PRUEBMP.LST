Turbo Assembler	 Version 4.1	    11/13/20 19:13:07	    Page 1
Pruebmp.ASM



      1				     IDEAL
      2	0000			     MODEL small
      3	0000			     STACK 100h
      4	0100			     DATASEG
      5				     ;================================
      6	0000  62 6C 6F 63 6B 73	38+  filename db 'blocks8.bmp',0
      7	      2E 62 6D 70 00
      8
      9	000C  ????		     filehandle	dw ?
     10
     11	000E  36*(00)		     Header db 54 dup (0)
     12
     13	0044  0400*(00)		     Palette db	256*4 dup (0)
     14
     15	0444  0140*(24)		     ScrLine db	320 dup	('$')
     16
     17	0584  45 72 72 6F 72 0D	0A+  ErrorMsg db 'Error', 13, 10,'$'
     18	      24
     19				     ;================================
     20	058C			     CODESEG
     21				     ;================================
     22	0000			     proc OpenFile
     23
     24					 ; Open	file
     25
     26	0000  B4 3D			 mov ah, 3Dh
     27	0002  32 C0			 xor al, al
     28	0004  BA 0000r			 mov dx, offset	filename
     29	0007  CD 21			 int 21h
     30
     31	0009  72 04			 jc openerror
     32	000B  A3 000Cr			 mov [filehandle], ax
     33	000E  C3			 ret
     34
     35	000F				 openerror:
     36	000F  BA 0584r			 mov dx, offset	ErrorMsg
     37	0012  B4 09			 mov ah, 9h
     38	0014  CD 21			 int 21h
     39	0016  C3			 ret
     40	0017			     endp OpenFile
     41	0017			     proc ReadHeader
     42
     43					 ; Read	BMP file header, 54 bytes
     44
     45	0017  B4 3F			 mov ah,3fh
     46	0019  8B 1E 000Cr		 mov bx, [filehandle]
     47	001D  B9 0036			 mov cx,54
     48	0020  BA 000Er			 mov dx,offset Header
     49	0023  CD 21			 int 21h
     50	0025  C3			 ret
     51	0026				 endp ReadHeader
     52	0026				 proc ReadPalette
     53
     54					 ; Read	BMP file color palette,	256 colors * 4 bytes (400h)
     55
     56	0026  B4 3F			 mov ah,3fh
     57	0028  B9 0400			 mov cx,400h
Turbo Assembler	 Version 4.1	    11/13/20 19:13:07	    Page 2
Pruebmp.ASM



     58	002B  BA 0044r			 mov dx,offset Palette
     59	002E  CD 21			 int 21h
     60	0030  C3			 ret
     61	0031			     endp ReadPalette
     62	0031			     proc CopyPal
     63
     64					 ; Copy	the colors palette to the video	memory
     65					 ; The number of the first color should	be sent	to port	3C8h
     66					 ; The palette is sent to port 3C9h
     67
     68	0031  BE 0044r			 mov si,offset Palette
     69	0034  B9 0100			 mov cx,256
     70	0037  BA 03C8			 mov dx,3C8h
     71	003A  B0 00			 mov al,0
     72
     73					 ; Copy	starting color to port 3C8h
     74
     75	003C  EE			 out dx,al
     76
     77					 ; Copy	palette	itself to port 3C9h
     78
     79	003D  42			 inc dx
     80	003E				 PalLoop:
     81
     82					 ; Note: Colors	in a BMP file are saved	as BGR values rather than RGB.
     83
     84	003E  8A 44 02			 mov al,[si+2] ; Get red value.
     85	0041  D0 E8 D0 E8		 shr al,2 ; Max. is 255, but video palette maximal
     86
     87					 ; value is 63.	Therefore dividing by 4.
     88
     89	0045  EE			 out dx,al ; Send it.
     90	0046  8A 44 01			 mov al,[si+1] ; Get green value.
     91	0049  D0 E8 D0 E8		 shr al,2
     92	004D  EE			 out dx,al ; Send it.
     93	004E  8A 04			 mov al,[si] ; Get blue	value.
     94	0050  D0 E8 D0 E8		 shr al,2
     95	0054  EE			 out dx,al ; Send it.
     96	0055  83 C6 04			 add si,4 ; Point to next color.
     97
     98					 ; (There is a null chr. after every color.)
     99
    100	0058  E2 E4			 loop PalLoop
    101	005A  C3			 ret
    102	005B			     endp CopyPal
    103
    104	005B			     proc CopyBitmap
    105
    106					 ; BMP graphics	are saved upside-down.
    107					 ; Read	the graphic line by line (200 lines in VGA format),
    108					 ; displaying the lines	from bottom to top.
    109
    110	005B  B8 A000			 mov ax, 0A000h
    111	005E  8E C0			 mov es, ax
    112	0060  B9 00C8			 mov cx,200
    113	0063				 PrintBMPLoop:
    114	0063  51			 push cx
Turbo Assembler	 Version 4.1	    11/13/20 19:13:07	    Page 3
Pruebmp.ASM



    115
    116					 ; di =	cx*320,	point to the correct screen line
    117
    118	0064  8B F9			 mov di,cx
    119	0066  D1 E1 D1 E1 D1 E1	D1+	 shl cx,6
    120	      E1 D1 E1 D1 E1
    121	0072  D1 E7 D1 E7 D1 E7	D1+	 shl di,8
    122	      E7 D1 E7 D1 E7 D1	E7+
    123	      D1 E7
    124	0082  03 F9			 add di,cx
    125
    126					 ; Read	one line
    127
    128	0084  B4 3F			 mov ah,3fh
    129	0086  B9 0140			 mov cx,320
    130	0089  BA 0444r			 mov dx,offset ScrLine
    131	008C  CD 21			 int 21h
    132
    133	008E  BA 0444r			 lea dx,ScrLine	;lea=carga la direccion	al registro (lea registro16,direccion)
    134	0091  B4 09			     mov ah,09h	;le mueve al registro ah un 09 en hexadecimal por eso la h
    135	0093  CD 21			     int 21h  ;int = interrupcion /interrupcion	21,9(ah	=09): imprime hasta toparse
    136						     ; con el simbolo "$",		por eso	en la linea anterior le	movi un	09  +
    137				     al	ah
    138
    139
    140					 ; Copy	one line into video memory
    141
    142	0095  FC			 cld
    143
    144					 ; Clear direction flag, for movsb
    145
    146	0096  B9 0140			 mov cx,320
    147	0099  BE 0444r			 mov si,offset ScrLine
    148	009C  F3> A4			 rep movsb
    149
    150					 ; Copy	line to	the screen
    151					 ;rep movsb is same as the following code:
    152					 ;mov es:di, ds:si
    153					 ;inc si
    154					 ;inc di
    155					 ;dec cx
    156					 ;loop until cx=0
    157
    158	009E  59			 pop cx
    159	009F  E2 C2			 loop PrintBMPLoop
    160	00A1  C3			 ret
    161	00A2			     endp CopyBitmap
    162				     ;================================
    163	00A2			     start:
    164	00A2  B8 0000s		     mov ax, @data
    165	00A5  8E D8		     mov ds, ax
    166				     ;================================
    167
    168					 ; Graphic mode
    169	00A7  B8 0013			 mov ax, 13h
    170	00AA  CD 10			 int 10h
    171
Turbo Assembler	 Version 4.1	    11/13/20 19:13:07	    Page 4
Pruebmp.ASM



    172					 ; Process BMP file
    173	00AC  E8 FF51			 call OpenFile
    174	00AF  E8 FF65			 call ReadHeader
    175	00B2  E8 FF71			 call ReadPalette
    176	00B5  E8 FF79			 call CopyPal
    177	00B8  E8 FFA0			 call CopyBitmap
    178					 ;Espera que le	de enter  para salirse
    179	00BB  32 E4			 xor ah,ah
    180	00BD  B4 01			     mov ah,01h
    181	00BF  CD 21			     int 21h
    182
    183					 ; Wait	for key	press
    184	00C1  B4 01			 mov ah,1
    185
    186	00C3  CD 21			 int 21h
    187					 ; Back	to text	mode
    188	00C5  B4 00			 mov ah, 0
    189	00C7  B0 02			 mov al, 2
    190	00C9  CD 10			 int 10h
    191				     ;================================
    192	00CB			     exit:
    193	00CB  B8 4C00			 mov ax, 4c00h
    194	00CE  CD 21			 int 21h
    195					 END start
Turbo Assembler	 Version 4.1	    11/13/20 19:13:07	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "11/13/20"
??FILENAME			  Text	 "Pruebmp "
??TIME				  Text	 "19:13:07"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PRUEBMP
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
COPYBITMAP			  Near	 _TEXT:005B
COPYPAL				  Near	 _TEXT:0031
ERRORMSG			  Byte	 DGROUP:0584
EXIT				  Near	 _TEXT:00CB
FILEHANDLE			  Word	 DGROUP:000C
FILENAME			  Byte	 DGROUP:0000
HEADER				  Byte	 DGROUP:000E
OPENERROR			  Near	 _TEXT:000F
OPENFILE			  Near	 _TEXT:0000
PALETTE				  Byte	 DGROUP:0044
PALLOOP				  Near	 _TEXT:003E
PRINTBMPLOOP			  Near	 _TEXT:0063
READHEADER			  Near	 _TEXT:0017
READPALETTE			  Near	 _TEXT:0026
SCRLINE				  Byte	 DGROUP:0444
START				  Near	 _TEXT:00A2

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0100 Para	  Stack	  STACK
  _DATA				  16  058C Word	  Public  DATA
_TEXT				  16  00D0 Word	  Public  CODE
