Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 1
quinto.ASM



      1				     ;-------------------------------------------;
      2				     ;Estructura de un programa	en ensamblador,	 ;
      3				     ;para arquitectura	8086/8088/80306	mips	 ;
      4				     ;Creado por: Ing. Carlos Benavides	C. MsC.	 ;
      5				     ;Propósito: Docente, académico, ejemplo.	 ;
      6				     ;Forma de compilación:			 ;
      7				     ;	Usando el turbo	assembler de borland 4.	 ;
      8				     ;	  tasm /zi /l quinto[.asm]		 ;
      9				     ;	  tlink	/v quinto[.oobj]		 ;
     10				     ;						 ;
     11				     ; y si lo quiere depurar turbo debuger	 ;
     12				     ;						 ;
     13				     ;	    td quinto[.exe]			 ;
     14				     ; FUM: Mayo 16, 2003.			 ;
     15				     ;-------------------------------------------;
     16
     17	0000			     SPila Segment para	Stack 'Stack'
     18
     19	0000  40*(53 65	67 53 74  +	  db 64	Dup ('SegStack ')
     20	      61 63 6B 20)
     21
     22	0240			     SPila EndS
     23
     24	0000			     SDato Segment para	public'Data'
     25	0000  48 6F 6C 61 20 4D	75+	     Message	 db  'Hola Mundo',10,13,'$'
     26	      6E 64 6F 0A 0D 24
     27	000D  01			     Textcolor	     db	     01h
     28	000E  00			   Fila	       db    0h
     29	000F  00			   Columna     db    0h
     30	0010  FF*(24)			   LineCommand db    0FFh Dup ('$')
     31	010F  FF*(??)			   Param1      db    0FFh Dup (?)
     32	020E  FF*(??)			   Param2      db    0FFh Dup (?)
     33	030D  FF*(??)			   Param3      db    0FFh Dup (?)
     34	040C  FF*(??)			   Param4      db    0FFh Dup (?)
     35	050B  FF*(??)			   Param5      db    0FFh Dup (?)
     36	060A  FF*(??)			   Param6      db    0FFh Dup (?)
     37	0709  FF*(??)			   Param7      db    0FFh Dup (?)
     38	0808			     SDato EndS
     39
     40				     ;-------------------------------;
     41				     ;	     Definición	de Macros	     ;
     42				     ;(afuera del segmento de código);
     43				     ;-------------------------------;
     44
     45					   ListPush  Macro lista
     46						 IRP i,<lista>
     47						    Push i
     48						 EndM
     49					   EndM
     50
     51					   ListPop  Macro lista
     52						 IRP i,<lista>
     53						    Pop	i
     54						 EndM
     55					   EndM
     56
     57					     PushA Macro
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 2
quinto.ASM



     58						 ListPush <Ax, Bx, Cx, Dx, Si, Di, Bp, Sp>
     59					   EndM										     ;Su    +
     60				     contra parte es la	macro siguiente.
     61
     62					     PopA Macro
     63														     ;...la pila del+
     64				     programa.
     65						 Pop   Sp								     ;poner +
     66				     equilibrar	la pila...
     67						 Pop   Bp									    +
     68				     ;...solamente después de haber...
     69						 Pop   Di									    +
     70				     ;...llamado antes a pushallregs.
     71						 Pop   Si								     ;Sino  +
     72				     se	produce	un error en el programa.
     73						 Pop   Dx
     74						 Pop   Cx
     75						 Pop   Bx
     76						 Pop   Ax
     77					     EndM
     78
     79	0000			     SCodigo Segment para public 'Code'					     ;Define el	segmento de +
     80				     código para tasm.
     81					     Assume CS:SCodigo,	SS:SPila, DS:SDato				     ;Asignación de +
     82				     los segmentos a los registro de segmentos del CPU.
     83
     84					     ;---------------------------------------;
     85					     ;	      Definición de Procedimientos     ;
     86					     ; (dentro del segmento de código)	     ;
     87					     ; (pero afuera de la línea	de ejecución ;
     88					     ; pero debe estar asumido el segmento   ;
     89					     ; de código para los procedimientos     ;
     90					     ; pues son	de tipo	near.			 ;
     91					     ;---------------------------------------;
     92
     93					     ;------------------------------------------------------;
     94					     ;		      Parámetros de entrada		    ;
     95					     ;------------------------------------------------------;
     96					     ;	     Al,Número de líneas por desplazar.		    ;
     97					     ;	     Bh,Atributo. Pero este atributo se	le pasa	    ;
     98					   ;	   como	parámetro mediante una variable	gobal	  ;
     99					   ;	   llamada TextColor.
    100					     ;	     Ch,Fila de	la esquina superior izquierda.	    ;
    101					     ;	     Cl,Columna	de la esquina superior izquierda.   ;
    102					     ;	     Dh,Fila de	la esquina inferior derecha.	    ;
    103					     ;	     Dl,Columna	de la esquina inferior derecha.	    ;
    104					     ;------------------------------------------------------;
    105					     ;		       Parámetros de salida		    ;
    106					     ;------------------------------------------------------;
    107					     ;								      ;
    108					     ;			     Ninguno				    ;
    109					     ;								      ;
    110					     ;------------------------------------------------------;
    111	0000				   ClearScreen Proc Far
    112						 PushA
1   113						 ListPush <Ax, Bx, Cx, Dx, Si, Di, Bp, Sp>
3   114	0000  50				    Push Ax
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 3
quinto.ASM



3   115	0001  53				    Push Bx
3   116	0002  51				    Push Cx
3   117	0003  52				    Push Dx
3   118	0004  56				    Push Si
3   119	0005  57				    Push Di
3   120	0006  55				    Push Bp
3   121	0007  54				    Push Sp
    122	0008  B4 07				 Mov   Ah,07							     ;Prepara	    +
    123				     servicio 07 para la Pop 10h. (desplazamiento de ventana hacia abajo).
    124	000A  B0 19				 Mov   Al,25							     ;Número de	    +
    125				     líneas por	desplazar en este caso total de	filas 25.
    126	000C  B7 0Dr				 Mov   Bh,OffSet Ds:TextColor				;A modo	de ejemplo para	ver +
    127				     el	efecto de no ponerle que transfiera un byte...
    128	000E  8A 3E 000Dr			 Mov   Bh,Byte Ptr OffSet Ds:TextColor			     ;Atributo con que se va+
    129				     a desplazar; es decir; color. 00 =	negro.
    130	0012  B5 00				 Mov   Ch,00							     ;En donde	    +
    131				     comienza: fila de la esquina superior izquierda.
    132	0014  B1 00				 Mov   Cl,00							     ;En donde	    +
    133				     comienza: columna de la esquina superior izquierda.
    134	0016  B6 19				 Mov   Dh,25							     ;En donde	    +
    135				     termina:  fila de la esquina inferior derecha.
    136	0018  B2 50				 Mov   Dl,80							     ;En donde	    +
    137				     termina:  columna de la esquina inferior derecha.
    138	001A  CD 10				 Int   10h							     ;ejecute la Pop+
    139				     10h/ servicio 07h,	desplaze la ventana hacia abajo.
    140						 PopA
1   141	001C  5C				 Pop   Sp								     ;poner +
    142				     equilibrar	la pila...
1   143	001D  5D				 Pop   Bp									    +
    144				     ;...solamente después de haber...
1   145	001E  5F				 Pop   Di									    +
    146				     ;...llamado antes a pushallregs.
1   147	001F  5E				 Pop   Si								     ;Sino  +
    148				     se	produce	un error en el programa.
1   149	0020  5A				 Pop   Dx
1   150	0021  59				 Pop   Cx
1   151	0022  5B				 Pop   Bx
1   152	0023  58				 Pop   Ax
    153	0024  CB				 RetF									     ;Se    +
    154				     debe retornar o el	programa se queda pegado.
    155	0025				   ClearScreen EndP
    156
    157
    158					     ;------------------------------------------------------;
    159					     ;		      Parámetros de entrada		    ;
    160					     ;------------------------------------------------------;
    161					     ;	Dx, Debe contener el OffSet del	texto a	desplegar.  ;
    162					     ;------------------------------------------------------;
    163					     ;		       Parámetros de salida		    ;
    164					     ;------------------------------------------------------;
    165					     ;								      ;
    166					     ;			     Ninguno			      ;
    167					     ;								      ;
    168					     ;------------------------------------------------------;
    169	0025				   PrintfS Proc	Near
    170						 PushA
1   171						 ListPush <Ax, Bx, Cx, Dx, Si, Di, Bp, Sp>
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 4
quinto.ASM



3   172	0025  50				    Push Ax
3   173	0026  53				    Push Bx
3   174	0027  51				    Push Cx
3   175	0028  52				    Push Dx
3   176	0029  56				    Push Si
3   177	002A  57				    Push Di
3   178	002B  55				    Push Bp
3   179	002C  54				    Push Sp
    180						 ;Lea  Dx,String					     ;Este parámetro debe   +
    181				     ser pasado	afuera.
    182	002D  B4 09				 Mov   Ah,09						     ;parámetro	09 del	    +
    183				     servicio de Pop 21	(imprimir en pantalla cadena terminada en $)
    184	002F  CD 21				 Int   21h						     ;ejecute la	    +
    185				     interrupción, e imprima en	pantalla.
    186						 PopA
1   187	0031  5C				 Pop   Sp								     ;poner +
    188				     equilibrar	la pila...
1   189	0032  5D				 Pop   Bp									    +
    190				     ;...solamente después de haber...
1   191	0033  5F				 Pop   Di									    +
    192				     ;...llamado antes a pushallregs.
1   193	0034  5E				 Pop   Si								     ;Sino  +
    194				     se	produce	un error en el programa.
1   195	0035  5A				 Pop   Dx
1   196	0036  59				 Pop   Cx
1   197	0037  5B				 Pop   Bx
1   198	0038  58				 Pop   Ax
    199	0039  C3				 Ret
    200	003A				   PrintfS EndP
    201
    202
    203					     ;------------------------------------------------------;
    204					     ;		      Parámetros de entrada		    ;
    205					     ;------------------------------------------------------;
    206					     ;	     Bl,Atributo o color con que se despliega.	    ;
    207					     ;	     Dl,Caracter a desplegar.			    ;
    208					     ;------------------------------------------------------;
    209					     ;		       Parámetros de salida		    ;
    210					     ;------------------------------------------------------;
    211					     ;								      ;
    212					     ;			     Ninguno				  ;
    213					     ;								      ;
    214					     ;------------------------------------------------------;
    215	003A				   PrintfC Proc	Near
    216						 PushA
1   217						 ListPush <Ax, Bx, Cx, Dx, Si, Di, Bp, Sp>
3   218	003A  50				    Push Ax
3   219	003B  53				    Push Bx
3   220	003C  51				    Push Cx
3   221	003D  52				    Push Dx
3   222	003E  56				    Push Si
3   223	003F  57				    Push Di
3   224	0040  55				    Push Bp
3   225	0041  54				    Push Sp
    226	0042  B4 02				 Mov   Ah,02						     ;Servicio de Pop 21h / +
    227				     02	imprimir un caracter en	pantalla.
    228						 ;Mov  Al,Caracter					     ;Este parámetro debe   +
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 5
quinto.ASM



    229				     ser pasado	afuera.
    230	0044  B7 00				 Mov   Bh,00
    231						 ;Mov  Bl,Atributo					     ;Este parámetro debe   +
    232				     ser pasado	afuera.
    233	0046  CD 10				 Int   10h						     ;ejecute la	    +
    234				     interrupción, e imprima en	pantalla.
    235						 PopA
1   236	0048  5C				 Pop   Sp								     ;poner +
    237				     equilibrar	la pila...
1   238	0049  5D				 Pop   Bp									    +
    239				     ;...solamente después de haber...
1   240	004A  5F				 Pop   Di									    +
    241				     ;...llamado antes a pushallregs.
1   242	004B  5E				 Pop   Si								     ;Sino  +
    243				     se	produce	un error en el programa.
1   244	004C  5A				 Pop   Dx
1   245	004D  59				 Pop   Cx
1   246	004E  5B				 Pop   Bx
1   247	004F  58				 Pop   Ax
    248	0050  C3				 Ret
    249	0051				   PrintfC EndP
    250
    251
    252					     ;------------------------------------------------------;
    253					     ;		      Parámetros de entrada		    ;
    254					     ;------------------------------------------------------;
    255					     ;	     Bh,Pagina de video	a mandar.		    ;
    256					     ;	     Dh,Fila.						      ;
    257					     ;	     Dl,Columna.					      ;
    258					     ;------------------------------------------------------;
    259					     ;		       Parámetros de salida		    ;
    260					     ;------------------------------------------------------;
    261					     ;									      ;
    262					     ;			     Ninguno				      ;
    263					     ;								      ;
    264					     ;------------------------------------------------------;
    265	0051				   GotoXY Proc Far
    266	0051  52				 Push  Dx
    267	0052  55				 Push  Bp
    268	0053  8B EC				 Mov   Bp,Sp
    269	0055  8B 56 08				 Mov   Dx,[Bp+08h]
    270						 ;Mov  Dl,Col tiene la columna
    271						 ;Mov  Dh,Fil tiene la fila
    272	0058  B4 02				 Mov   Ah,02h
    273	005A  B7 00				 Mov   Bh,00h
    274	005C  CD 10				 Int   10h
    275	005E  5D				 Pop   Bp
    276	005F  5A				 Pop   Dx
    277	0060  CB				 RetF
    278	0061				   GotoXY EndP
    279
    280					     ;------------------------------------------------------;
    281					     ;		      Parámetros de entrada		    ;
    282					     ;------------------------------------------------------;
    283					     ;	     Bh,Atributo.				    ;
    284					     ;------------------------------------------------------;
    285					     ;		       Parámetros de salida		    ;
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 6
quinto.ASM



    286					     ;------------------------------------------------------;
    287					     ;	     Dh,Fila.					    ;
    288					     ;	     Dl,Columna.				    ;
    289					     ;------------------------------------------------------;
    290	0061				   WhereXY Proc	Far
    291	0061  1E				 Push  Ds
    292	0062  52				 Push  Dx
    293	0063  55				 Push  Bp
    294	0064  8B EC				 Mov   Bp,Sp
    295						 ;Mov  Col,Dl tiene la columna
    296						 ;Mov  Fil,Dh tiene la fila
    297	0066  B4 03				 Mov   Ah,03
    298	0068  B7 00				 Mov   Bh,00
    299	006A  CD 10				 Int   10h
    300	006C  8B 7E 0A				 Mov   Di,10[Bp]
    301	006F  8B 46 0C				 Mov   Ax,12[Bp]
    302	0072  8E D8				 Mov   Ds,Ax
    303	0074  88 15				 Mov   Byte Ptr	Ds:[Di],Dl
    304	0076  8B 7E 0E				 Mov   Di,14[Bp]
    305	0079  8B 46 10				 Mov   Ax,16[Bp]
    306	007C  8E D8				 Mov   Ds,Ax
    307	007E  88 35				 Mov   Byte Ptr	Ds:[Di],Dh
    308	0080  5D				 Pop   Bp
    309	0081  5A				 Pop   Dx
    310	0082  1F				 Pop   Ds
    311	0083  CA 0008				 RetF  8
    312	0086				   WhereXY EndP
    313
    314					     ;------------------------------------------------------;
    315					     ;		      Parámetros de entrada		    ;
    316					     ;------------------------------------------------------;
    317					     ;	     Al	contiene el número Ascii a convertir.	    ;
    318					   ;	   Sin embargo se pasa como un parámetro por	  ;
    319					   ;	   valor mediante el registro Ax vía la	pila.	  ;
    320					     ;------------------------------------------------------;
    321					     ;		       Parámetros de salida		    ;
    322					     ;------------------------------------------------------;
    323					     ;								      ;
    324					     ;			     Ninguno			      ;
    325					     ;								      ;
    326					     ;------------------------------------------------------;
    327	0086				   PrintHex Proc Near
    328	0086  50				 Push  Ax				   ;Se salvan los registro que se utilizaran.
    329	0087  53				 Push  Bx				   ;todo por precaución	y no dejar en mal   +
    330				     estado al cpu.
    331	0088  55				 Push  Bp				   ;incluyendo el puntero base auxiliar	en  +
    332				     la	pila
    333	0089  8B EC				 Mov  Bp,Sp				  ;hacemos apuntar al puntero base a la	cima+
    334				     de	la pila...
    335	008B  8B 46 08				 Mov  Ax,[BP+08h]			  ;sacamos el parámetro	sumando	2 por cada  +
    336				     push realizado... por eso se le suman 10...
    337	008E  3C 09				 cmp  Al,09h				  ;empieza el cuerpo del procedimiento...
    338	0090  7F 09				 jnle  hex
    339	0092  8A D8				 Mov   Bl,Al
    340	0094  04 30				 add   Al,48
    341	0096  E8 FFA1				 Call  PrintfC
    342	0099  EB 07				 jmp short exit
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 7
quinto.ASM



    343	009B					 hex:
    344	009B  8A D8				       Mov   Bl,Al
    345	009D  04 37				       add   Al,55
    346	009F  E8 FF98				       Call  PrintfC
    347	00A2					 exit:					       ;termina	el cuerpo del		    +
    348				     procedimiento...
    349	00A2  5D				       Pop   Bp					;y se prepara para la salidad del   +
    350				     mismo restaurando y equilibrando la pila nuevamente...
    351	00A3  5B				       Pop   Bx					;empezando por la restauración de la+
    352				     cima de la	pila...
    353	00A4  58				       Pop   Ax
    354	00A5  C2 0002				       Ret 2					;retorne al programa principal y    +
    355				     mueva el tope de la pila sin el parámetro metido por el ax...
    356	00A8				   PrintHex EndP				 ;así la pila se equilibra y continúa el    +
    357				     programa como si nada hubiera sucedido...
    358
    359					   ;------------------------------------------------------;
    360					     ;		      Parámetros de entrada		    ;
    361					     ;------------------------------------------------------;
    362					     ;	     Bh,Atributo.				    ;
    363					     ;------------------------------------------------------;
    364					     ;		       Parámetros de salida		    ;
    365					     ;------------------------------------------------------;
    366					     ;	     Dh,Fila.					    ;
    367					     ;	     Dl,Columna.				    ;
    368					     ;------------------------------------------------------;
    369	00A8				   GetCommanderLine Proc Near
    370	      =0080				 LongLC	   EQU	 80h
    371						 ListPush  <Es,	Di, Si,	Cx, Bp>
2   372	00A8  06				    Push Es
2   373	00A9  57				    Push Di
2   374	00AA  56				    Push Si
2   375	00AB  51				    Push Cx
2   376	00AC  55				    Push Bp
    377	00AD  8B EC				 Mov   Bp,Sp
    378	00AF  8C C0				 Mov   Ax,Es
    379	00B1  8E D8				 Mov   Ds,Ax
    380	00B3  8B 7E 0C				 Mov   Di,12[Bp]
    381	00B6  8B 46 0E				 Mov   Ax,14[Bp]
    382	00B9  8E C0				 Mov   Es,Ax
    383	00BB  33 C9				 Xor   Cx,Cx
    384	00BD  8A 0E 0080			 Mov   Cl,Byte Ptr Ds:[LongLC]
    385	00C1  FE C9				 dec   cl
    386	00C3  BE 0082				 Mov   Si,2[LongLC]			   ;dos	= uno por la posición 81h y uno	más +
    387				     por el espacio en blanco.
    388	00C6  F3> A4				 Rep   Movsb
    389						 ListPop <Bp, Bx, Si, Di, Es>
2   390	00C8  5D				    Pop	Bp
2   391	00C9  5B				    Pop	Bx
2   392	00CA  5E				    Pop	Si
2   393	00CB  5F				    Pop	Di
2   394	00CC  07				    Pop	Es
    395	00CD  C2 0004				 Ret   4
    396	00D0				   GetCommanderLine EndP
    397
    398					   ;------------------------------------------------------;
    399					     ;		      Parámetros de entrada		    ;
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 8
quinto.ASM



    400					     ;------------------------------------------------------;
    401					     ;	     Bh,Atributo.				    ;
    402					     ;------------------------------------------------------;
    403					     ;		       Parámetros de salida		    ;
    404					     ;------------------------------------------------------;
    405					     ;	     Dh,Fila.					    ;
    406					     ;	     Dl,Columna.				    ;
    407					     ;------------------------------------------------------;
    408	00D0				   EvalCommanderLine Proc Near
    409	00D0  B4 09			     mov ah,09h
    410	00D2  BA 0010r			     mov dx,OffSet LineCommand
    411	00D5  CD 21			     int 21h
    412	00D7  B4 09			     mov ah,09h
    413	00D9  BA 0010r			     mov dx,OffSet LineCommand
    414	00DC  C3			     ret
    415	00DD				   EvalCommanderLine EndP
    416				     ;------------------------------------------------------;
    417				     ;		      Programa Principal		    ;
    418				     ;------------------------------------------------------;
    419	00DD			     Begin:
    420					   PushA										    +
    421				     ;Procedimiento principal como main{ } en C.
1   422						 ListPush <Ax, Bx, Cx, Dx, Si, Di, Bp, Sp>
3   423	00DD  50				    Push Ax
3   424	00DE  53				    Push Bx
3   425	00DF  51				    Push Cx
3   426	00E0  52				    Push Dx
3   427	00E1  56				    Push Si
3   428	00E2  57				    Push Di
3   429	00E3  55				    Push Bp
3   430	00E4  54				    Push Sp
    431	00E5  33 C0			   Xor	 Ax,Ax										    +
    432				     ;Pone en cero Al reg Ax.
    433	00E7  B8 0000s			   Mov	 Ax,SDato								     ;Mueve +
    434				     la	posición de SData Al reg Ax.
    435	00EA  8E D8			   Mov	 DS,Ax									     ;Mueve +
    436				     la	posición de Ax (SData) Al reg DS.
    437
    438	00EC  1E			   push	Ds
    439	00ED  B8 0000s			   mov ax,seg LineCommand
    440	00F0  50			   push	ax
    441	00F1  B8 0010r			   lea ax,LineCommand
    442	00F4  50			   push	ax
    443	00F5  E8 FFB0			   call	GetCommanderLine
    444	00F8  1F			   pop Ds
    445
    446					   ;call EvalCommanderLine
    447
    448	00F9  BA 0010r			   lea dx,LineCommand ;lea=carga la direccion al registro (lea registro16,direccion)
    449	00FC  B4 09			   mov ah,09h ;le mueve	al registro ah un 09 en	hexadecimal por	eso la h
    450	00FE  CD 21			   int 21h  ;int = interrupcion	/interrupcion 21,9(ah =09): imprime hasta toparse
    451						 ; con el simbolo "$",		    por	eso en la linea	anterior le movi un 09 al ah
    452
    453	0100  B8 4C00			   Mov	 Ax,4c00h					       ;Saque todos los	registros.
    454	0103  CD 21			   Int	 21h
    455
    456	0105			     SCodigo EndS									     ;Fin   +
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 9
quinto.ASM



    457				     del segmento de código.
    458					   End Begin								     ;Fin del	    +
    459				     programa la etiqueta Al final dice	en que punto debe comenzar el programa.
Turbo Assembler	 Version 4.1	    11/10/20 12:34:40	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "11/10/20"
??FILENAME			  Text	 "quinto  "
??TIME				  Text	 "12:34:40"
??VERSION			  Number 040A
@CPU				  Text	 0101H
@CURSEG				  Text	 SCODIGO
@FILENAME			  Text	 QUINTO
@WORDSIZE			  Text	 2
BEGIN				  Near	 SCODIGO:00DD
CLEARSCREEN			  Far	 SCODIGO:0000
COLUMNA				  Byte	 SDATO:000F
EVALCOMMANDERLINE		  Near	 SCODIGO:00D0
EXIT				  Near	 SCODIGO:00A2
FILA				  Byte	 SDATO:000E
GETCOMMANDERLINE		  Near	 SCODIGO:00A8
GOTOXY				  Far	 SCODIGO:0051
HEX				  Near	 SCODIGO:009B
LINECOMMAND			  Byte	 SDATO:0010
LONGLC				  Number 0080
MESSAGE				  Byte	 SDATO:0000
PARAM1				  Byte	 SDATO:010F
PARAM2				  Byte	 SDATO:020E
PARAM3				  Byte	 SDATO:030D
PARAM4				  Byte	 SDATO:040C
PARAM5				  Byte	 SDATO:050B
PARAM6				  Byte	 SDATO:060A
PARAM7				  Byte	 SDATO:0709
PRINTFC				  Near	 SCODIGO:003A
PRINTFS				  Near	 SCODIGO:0025
PRINTHEX			  Near	 SCODIGO:0086
TEXTCOLOR			  Byte	 SDATO:000D
WHEREXY				  Far	 SCODIGO:0061

Macro Name

LISTPOP
LISTPUSH
POPA
PUSHA

Groups & Segments		  Bit Size Align  Combine Class

SCODIGO				  16  0105 Para	  Public  CODE
SDATO				  16  0808 Para	  Public  DATA
SPILA				  16  0240 Para	  Stack	  STACK
